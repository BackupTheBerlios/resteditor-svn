#!/usr/bin/env python
# -*- coding: ISO-8859-1 -*-
# generated by wxGlade 0.4 on Fri Dec 16 08:29:44 2005

"""
This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
"""
import wx, wxPython.html, wxPython.stc
import subprocess
import time
import os

import reSTEditorControl

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
	self.workingFile="" # Path of actual file
	self.exportValues={
		'HTML' : False,
		'XML' : False,
		'LaTeX' : False,
		'DVI' : False,
		'PDF' : False
		}
	self.ctrl = reSTEditorControl.reSTEditorControl()
	#
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MAXIMIZE|wx.MAXIMIZE_BOX|wx.SYSTEM_MENU|wx.RESIZE_BORDER|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.window_1 = wx.SplitterWindow(self, -1, style=wx.SP_3D|wx.SP_BORDER)
        self.window_1_pane_2 = wx.Panel(self.window_1, -1)
        self.notebook_1 = wx.Notebook(self.window_1_pane_2, -1, style=0)
        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, -1)
        self.window_1_pane_1 = wx.Panel(self.window_1, -1)
        
        # Menu Bar
        self.frame_1_menubar = wx.MenuBar()
        self.SetMenuBar(self.frame_1_menubar)
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(10, "New", "New file", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(11, "Open", "Open a file", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(12, "Save", "Save working file", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(13, "Save as ...", "Save file as", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(30, "Do Export", "Export in choosen formats", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(31, "html", "Export as html", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(32, "xml", "Export to xml/docbook", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(33, "LaTeX", "Export to LaTeX", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(34, "dvi", "Export to dvi", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(35, "pdf", "Export to pdf", wx.ITEM_CHECK)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "Export")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(41, "About", "Information about reSTEditor", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "Help")
        # Menu Bar end
        
        # Tool Bar
        self.frame_1_toolbar = wx.ToolBar(self, -1)
        self.SetToolBar(self.frame_1_toolbar)
        self.frame_1_toolbar.AddLabelTool(10, "New", wx.Bitmap("./icons/generic.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "New File", "Create new file")
        self.frame_1_toolbar.AddLabelTool(11, "Open", wx.Bitmap("./icons/folder.open.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Open file", "Open a txt-file for editing")
        self.frame_1_toolbar.AddLabelTool(12, "Save", wx.Bitmap("./icons/quill.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Save file", "Save the actual working file")
        self.frame_1_toolbar.AddSeparator()
        self.frame_1_toolbar.AddSeparator()
        self.frame_1_toolbar.AddSeparator()
        self.frame_1_toolbar.AddLabelTool(14, "Export", wx.Bitmap("./icons/layout.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Do all exports", "Export document in choosen formats")
        self.frame_1_toolbar.AddSeparator()
        self.frame_1_toolbar.AddSeparator()
        self.frame_1_toolbar.AddSeparator()
        self.frame_1_toolbar.AddLabelTool(20, "HTML", wx.Bitmap("./icons/world2.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Export HTML", "Export document as html")
        self.frame_1_toolbar.AddLabelTool(21, "XML", wx.Bitmap("./icons/script.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Export XML", "Export document as XML")
        self.frame_1_toolbar.AddLabelTool(22, "TeX", wx.Bitmap("./icons/tex.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Export TeX", "Export document as TeX")
        self.frame_1_toolbar.AddLabelTool(23, "DVI", wx.Bitmap("./icons/dvi.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Export DVI", "Export document as DVI")
        self.frame_1_toolbar.AddLabelTool(24, "PDF", wx.Bitmap("./icons/pdf.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Export PDF", "Export document as PDF")
        # Tool Bar end
        self.outputWindow = wxPython.html.wxHtmlWindow(self.window_1_pane_1, -1)
        self.inputCtrl = wxPython.stc.wxStyledTextCtrl(self.notebook_1_pane_1, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.newFile, id=10)
        self.Bind(wx.EVT_MENU, self.openFile, id=11)
        self.Bind(wx.EVT_MENU, self.saveFile, id=12)
        self.Bind(wx.EVT_MENU, self.saveFileAs, id=13)
        self.Bind(wx.EVT_MENU, self.exportRST, id=30)
        self.Bind(wx.EVT_MENU, self.setExportHTML, id=31)
        self.Bind(wx.EVT_MENU, self.setExportXML, id=32)
        self.Bind(wx.EVT_MENU, self.setExportLaTeX, id=33)
        self.Bind(wx.EVT_MENU, self.setExportDVI, id=34)
        self.Bind(wx.EVT_MENU, self.setExportPDF, id=35)
        self.Bind(wx.EVT_MENU, self.aboutReSTEditor, id=41)
        self.Bind(wx.EVT_TOOL, self.newFile, id=10)
        self.Bind(wx.EVT_TOOL, self.openFile, id=11)
        self.Bind(wx.EVT_TOOL, self.saveFile, id=12)
        self.Bind(wx.EVT_TOOL, self.exportRST, id=14)
        self.Bind(wx.EVT_TOOL, self.exportExplicitHTML, id=20)
        self.Bind(wx.EVT_TOOL, self.exportExplicitXML, id=21)
        self.Bind(wx.EVT_TOOL, self.exportExplicitLaTeX, id=22)
        self.Bind(wx.EVT_TOOL, self.exportExplicitDVI, id=23)
        self.Bind(wx.EVT_TOOL, self.exportExplicitPDF, id=24)
        # end wxGlade

	self.inputCtrl.SetZoom(3)
	
	#self.outputWindow.Bind(wx.WXK_F5, self.saveFile)

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("reSTEditor - version 0.1")
        self.SetSize((942, 728))
        self.frame_1_toolbar.SetToolBitmapSize((26, 26))
        self.frame_1_toolbar.Realize()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        grid_sizer_1 = wx.GridSizer(1, 1, 0, 0)
        grid_sizer_3 = wx.GridSizer(1, 1, 0, 0)
        grid_sizer_4 = wx.GridSizer(1, 1, 0, 0)
        grid_sizer_2 = wx.GridSizer(1, 1, 0, 0)
        grid_sizer_2.Add(self.outputWindow, 1, wx.EXPAND, 0)
        self.window_1_pane_1.SetAutoLayout(True)
        self.window_1_pane_1.SetSizer(grid_sizer_2)
        grid_sizer_2.Fit(self.window_1_pane_1)
        grid_sizer_2.SetSizeHints(self.window_1_pane_1)
        grid_sizer_4.Add(self.inputCtrl, 1, wx.EXPAND, 0)
        self.notebook_1_pane_1.SetAutoLayout(True)
        self.notebook_1_pane_1.SetSizer(grid_sizer_4)
        grid_sizer_4.Fit(self.notebook_1_pane_1)
        grid_sizer_4.SetSizeHints(self.notebook_1_pane_1)
        self.notebook_1.AddPage(self.notebook_1_pane_1, "tab1")
        grid_sizer_3.Add(self.notebook_1, 1, wx.EXPAND|wx.ALIGN_BOTTOM, 0)
        self.window_1_pane_2.SetAutoLayout(True)
        self.window_1_pane_2.SetSizer(grid_sizer_3)
        grid_sizer_3.Fit(self.window_1_pane_2)
        grid_sizer_3.SetSizeHints(self.window_1_pane_2)
        self.window_1.SplitHorizontally(self.window_1_pane_1, self.window_1_pane_2)
        grid_sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(grid_sizer_1)
        self.Layout()
        # end wxGlade

    def newFile(self, event): # wxGlade: MyFrame.<event_handler>
	self.workingFile = ""
        self.inputCtrl.ClearAll()
	self.outputWindow.ClearBackground()

    def openFile(self, event): # wxGlade: MyFrame.<event_handler>
	wildcard = "Test files (*.txt)|*.txt|"     \
	"All files (*.*)|*.*"
	openDialog = wx.FileDialog(
	self, message="Open file ...", defaultDir=os.getcwd(), 
	defaultFile="", wildcard=wildcard, style=wx.SAVE
	)
	# Show the dialog and retrieve the user response. If it is the OK response, 
	# process the data.
	if openDialog.ShowModal() == wx.ID_OK:
		# This returns a Python list of files that were selected.
		paths = openDialog.GetPaths()
	else:
		paths=[]
	for path in paths:
		self.workingFile = path
		lines = self.ctrl.getTXTFileContent(self.workingFile)
		self.inputCtrl.ClearAll()
		for line in lines:
			self.inputCtrl.InsertText(0, line)
	tmp_file = self.ctrl.transformRST(self.workingFile)
	self.outputWindow.LoadPage(tmp_file)
	os.remove(tmp_file)

    def saveFile(self, event, duringExport=False): # wxGlade: MyFrame.<event_handler>
	tmp_file = self.ctrl.saveFile(self.workingFile, self.inputCtrl.GetText(), duringExport, self.exportValues)
	if not tmp_file:
		self.saveFileAs(event)
	else:
		self.outputWindow.LoadPage(tmp_file)
		os.remove(tmp_file)

    def saveFileAs(self, event): # wxGlade: MyFrame.<event_handler>
        wildcard = "Test files (*.txt)|*.txt|"     \
		"All files (*.*)|*.*"
	openDialog = wx.FileDialog(
	self, message="Save file as ...", defaultDir=os.getcwd(), 
	defaultFile="", wildcard=wildcard, style=wx.SAVE
	)
	# Show the dialog and retrieve the user response. If it is the OK response, 
	# process the data.
	if openDialog.ShowModal() == wx.ID_OK:
		# This returns a Python list of files that were selected.
		paths = openDialog.GetPaths()
	else:
		paths=[]
	for path in paths:
		self.workingFile = path
		file = open(path, "w")
		file.write(self.inputCtrl.GetText())
		file.close()
	try:
		tmp_file = self.ctrl.transformRST(self.workingFile)
		self.outputWindow.LoadPage(tmp_file)
		os.remove(tmp_file)
	except TypeError:
		pass

    def setExport(self, event, format): # well, this would do the job of the next methods, but i don't no (yet), how to give arguments to eventhandler
		if self.exportValues[format]:
			self.exportValues[format] = False
		else:
			self.exportValues[format] = True

    def setExportHTML(self, event): # wxGlade: MyFrame.<event_handler>
		if self.exportValues['HTML']:
			self.exportValues['HTML'] = False
		else:
			self.exportValues['HTML'] = True

    def setExportXML(self, event): # wxGlade: MyFrame.<event_handler>
		if self.exportValues['XML']:
			self.exportValues['XML'] = False
		else:
			self.exportValues['XML'] = True

    def setExportLaTeX(self, event): # wxGlade: MyFrame.<event_handler>
		if self.exportValues['LaTeX']:
			self.exportValues['LaTeX'] = False
		else:
			self.exportValues['LaTeX'] = True

    def setExportDVI(self, event): # wxGlade: MyFrame.<event_handler>
		if self.exportValues['DVI']:
			self.exportValues['DVI'] = False
		else:
			self.exportValues['DVI'] = True

    def setExportPDF(self, event): # wxGlade: MyFrame.<event_handler>
		if self.exportValues['PDF']:
			self.exportValues['PDF'] = False
		else:
			self.exportValues['PDF'] = True

    def exportRST(self, event): # wxGlade: MyFrame.<event_handler>
	self.saveFile(event, True)
	if self.exportValues['HTML']:
		self.ctrl.exportHTML(self.workingFile)
	if self.exportValues['XML']:
		self.ctrl.exportXML(self.workingFile)
	if self.exportValues['LaTeX']:
		self.ctrl.exportLaTeX(self.workingFile)
	if self.exportValues['DVI']:
		if not self.ctrl.exportDVI(self.workingFile):
			self.LaTeXErrorMessage(event)
	if self.exportValues['PDF']:
		if not self.ctrl.exportPDF(self.workingFile):
			self.LaTeXErrorMessage(event)
	self.ctrl.cleanFilesUp(self.workingFile, False, self.exportValues)

    def exportExplicitHTML(self, event): # wxGlade: MyFrame.<event_handler>
        self.saveFile(event)
	self.ctrl.exportHTML(self.workingFile, True)

    def exportExplicitXML(self, event): # wxGlade: MyFrame.<event_handler>
        self.saveFile(event)
	self.ctrl.exportXML(self.workingFile, True)

    def exportExplicitLaTeX(self, event): # wxGlade: MyFrame.<event_handler>
        self.saveFile(event)
	self.ctrl.exportLaTeX(self.workingFile, True)
	
    def exportExplicitDVI(self, event): # wxGlade: MyFrame.<event_handler>
        self.saveFile(event)
	if not self.ctrl.exportDVI(self.workingFile, True):
		self.LaTeXErrorMessage(event)

    def exportExplicitPDF(self, event): # wxGlade: MyFrame.<event_handler>
        self.saveFile(event)
	if not self.ctrl.exportPDF(self.workingFile, True):
		self.LaTeXErrorMessage(event)

    def LaTeXErrorMessage(self, evt):
	dialog = wx.MessageDialog(self, "Error - can't publish DVI/PDF-document. - There is no LaTeX-distribution installed.\n\n\
If you run reSTEditor on Microsoft Windows, I recommend the MikTeX (http://www.miktex.org) distribution.\n\n\
If you run reSTEditor on Linux or MacOS, I recommend the TexLive (http://www.tug.org/texlive) distribution.\n\n\
Please install a LaTeX-distribution and try to export your document again.",
                               'No LaTeX-Distribution installed',
                               wx.OK | wx.ICON_ERROR
                               )
	dialog.CenterOnScreen()
        dialog.ShowModal()

    def aboutReSTEditor(self, event): # wxGlade: MyFrame.<event_handler>
        dialog = wx.MessageDialog(self, "This is reSTEditor\n\nVersion 0.1 - 2006-01-06\n\n(c) by Dipl-Inform.(FH) \
Andreas ''Akki'' Nitsch\n\nFor further documentation, new versions and for the sourcecode of reSTEditor visit http://www.akki-n.de/reSTEditor\n\nFor bug reports or suggestions for the next version of \
reSTEditor, please contact me via e-mail: resteditor@akki-n.de\n\nThank you very much for using reSTEditor\n\nRegards - Akki\n\n\
This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License\
as published by the Free Software Foundation; either version 2 of the License, or (at your option) any\nlater version.\n\n\
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the\nimplied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\
See the GNU General Public License for more details. ",
                               'Information about reSTEditor',
                               wx.OK | wx.ICON_INFORMATION
                               )
	dialog.CenterOnScreen()
        dialog.ShowModal()
	
# end of class MyFrame


